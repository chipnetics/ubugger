# Copyright (c) 2022 jeffrey -at- ieee.org. All rights reserved.
# Use of this source code (/program) is governed by a GPLV3 license,
# that can be found in the LICENSE file. Do not remove this header.
#
# 'ubugger' is a unicon/icon debugger which edits *.icn and creates associated *_dbg.icn files.
# It provides functionality for Continue and Stepping. However there is currently
# no functionality for stepping in and out of of procedures.
#
# Breakpoints can be added in you .icn files by adding '#xxx' as a comment, wherever you want to break.
# this allows you to still compile your original .icn in unicon without having to manually edit anything first.
#
# Building ubugger::::
# unicon ubugger.icn
#
# Running ubugger::::
# ./ubugger foo.icn bar.icn beef.icn, would general foo_dbg.icn, bar_dbg.icn and beef_dbg.icn.
# 
# Naturally you can chain execution as one command with 
# ./ubugger foo.icn bar.icn beef.icn & unicon foo_dbg.icn -x
link strings
procedure main(args)
    local debug_file
    every curr_file := !args do {
        debug_file := open(curr_file,"r") | stop("Cannot open ",curr_file," for reformatting.")
        
        if not ends_with(curr_file,".icn") then stop(curr_file," does not appear to be a .icn file.")
        fout:=open(replace(curr_file,".icn","_dbg.icn") ,"w") | write("Could not open file for writing.")

        every put(debug_data := [],!debug_file)

        # Track when we are in or out of methods or procedures.
        in_methproc := 0
        # create a global variable in each output file that will be used for tracking if the debugger
        # is currently stepping or continued.
        global_flag_name := "dbg_step_" || replace(curr_file,".icn","") 
        write(fout,"global ",global_flag_name)
        # Track the original line from the source code internally, so user can trace easier.
        orig_line := 1
        every debug_line := !debug_data do {
            trimmed := trim(debug_line," \t",0)  #trim from both sides
            if find("end",trimmed) == 1 && in_methproc==1 then in_methproc:=0
            if find("#xxx",trimmed) then write(fout,";",global_flag_name,":=1;")

            # For each $include directive, see if it was one of the files being turned into a dbg file.
            # by looking at the command-line arguments.
            if begins_with(trimmed,"$include") then {
                found := 0
                every debug_file_gen := !args do {
                    if find(debug_file_gen,trimmed) then {
                        write(fout,replace(trimmed,debug_file_gen,replace(debug_file_gen,".icn","_dbg.icn")))
                        found:=1
                    }
                }
                if found==0 then write(fout,trimmed)
                orig_line +:= 1
                next # nothing left to do so go to next line.
            }

            if in_methproc==1 & 
                *trimmed>1 & 
                not ends_with(trimmed,"{") &
                not ends_with(trimmed,"}") &
                not ends_with(trimmed,"do") &
                not ends_with(trimmed,"then") &
                not begins_with(trimmed,"local") &
                not begins_with(trimmed,"#") &
                not begins_with(trimmed,"static") then 
            write(fout,trimmed,";if /",global_flag_name," then ",global_flag_name,":=0; if ",global_flag_name,"==1 then {write(\"\\n\",center(\"",curr_file,"\",117,\"=\"));write(\">> \",left(\"",replace(trimmed,"\"","\\\""),"\",113,\" \"),\"|\");every local_s := staticnames(debug_c_s) do write(\"S-\",\"",right(orig_line,5,"-"),"\",\"\\t\\t\",left(local_s,20,\"-\"),left(fullimage(variable(local_s)),80,\" \"),\"|\");every local_v := localnames(debug_c_l) do write(\"L-\",\"",right(orig_line,5,"-"),"\",\"\\t\\t\",left(local_v,20,\"-\"),left(fullimage(variable(local_v)),80,\" \"),\"|\");write(\"[S] Step, [C] Continue\");ch:= getch(); if ch==\"s\" then write(\"Stepped.\") else {write(\"Continued.\\n\");",global_flag_name,":=0;}}") else 
            write(fout,trimmed)

            if begins_with(trimmed,"method") | begins_with(trimmed,"procedure") then in_methproc:=1
            orig_line +:= 1
        }
        close(debug_file)
    }
end

procedure begins_with(line,starting)
    return line[1:(*starting)+1]==starting
end

procedure ends_with(line,ending)
    return line[0:-*ending]==ending
end